apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.amazon.sampleapp"
        minSdkVersion 22
        targetSdkVersion 26
        versionCode 1
        versionName "1.5"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
}

dependencies {
    compileProjectAace()
    compileProjectMacc()
    compileProjectMetric()
    checkForLWALibrary()
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:cardview-v7:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.google.android.exoplayer:exoplayer-core:2.7.1'
    implementation 'com.google.android.exoplayer:exoplayer-dash:2.7.1'
    implementation 'com.google.android.exoplayer:exoplayer-smoothstreaming:2.7.1'
    implementation 'com.google.android.exoplayer:exoplayer-hls:2.7.1'
    implementation 'com.google.android.gms:play-services-maps:16.0.0'

    //Base SDK
    implementation 'com.amazonaws:aws-android-sdk-core:2.13.+'
    //AppSync SDK
    implementation 'com.amazonaws:aws-android-sdk-appsync:2.8.+'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0'
    implementation 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'

    implementation 'com.amazonaws:aws-android-sdk-s3:2.13.+'
    implementation ('com.amazonaws:aws-android-sdk-mobile-client:2.13.+@aar') { transitive = true }
    implementation ('com.amazonaws:aws-android-sdk-auth-userpools:2.13.+@aar') { transitive = true }
    implementation ('com.amazonaws:aws-android-sdk-iot:2.13.+@aar') { transitive = true }

}

void compileProjectAace() {
    String libsPath = "app/src/main/libs/"
    File debugAar = new File(libsPath + "aace-debug.aar")
    File releaseAar = new File(libsPath + "aace-release.aar")
    List<String> aarNames = new ArrayList<>()
    String compileMsg, msg
    if (debugAar.exists()) {
        aarNames.add(debugAar.getName())
    }
    if (releaseAar.exists()) {
        aarNames.add(releaseAar.getName())
        dependencies.implementation(name: 'aace-release', ext: 'aar')
        msg = "Attempting to build SampleApp with the aace-release.aar file"
    } else {
        dependencies.implementation project(':aace')
        msg = "The aace-release.aar was not found. Building SampleApp without the .aar file"
    }

    StringBuilder sb = new StringBuilder()
    sb.append("The aace .aar files found were: ").append(aarNames.toString())
    String foundFilesMsg = generateWrappedMessage(sb.toString())
    logger.lifecycle(foundFilesMsg)

    compileMsg = generateWrappedMessage(msg)
    logger.lifecycle(compileMsg)
}

void compileProjectMacc() {
    String libsPath = "app/src/main/libs/"
    File debugAar = new File(libsPath + "maccandroid-debug.aar")
    File releaseAar = new File(libsPath + "maccandroid-release.aar")
    List<String> aarNames = new ArrayList<>()
    String compileMsg, msg
    if (debugAar.exists()) {
        aarNames.add(debugAar.getName())
    }
    if (releaseAar.exists()) {
        aarNames.add(releaseAar.getName())
        dependencies.implementation(name: 'maccandroid-release', ext: 'aar')
        msg = "Attempting to build SampleApp with the maccandroid-release.aar file"
    } else {
        dependencies.implementation project(':maccandroid')
        msg = "The maccandroid-release.aar was not found. Building SampleApp without the .aar file"
    }

    StringBuilder sb = new StringBuilder()
    sb.append("The maccandroid .aar files found were: ").append(aarNames.toString())
    String foundFilesMsg = generateWrappedMessage(sb.toString())
    logger.lifecycle(foundFilesMsg)

    compileMsg = generateWrappedMessage(msg)
    logger.lifecycle(compileMsg)
}

void compileProjectMetric() {
    if (gradle.ext.metricsEnabled) {
        String libsPath = "app/src/main/libs/"
        File debugAar = new File(libsPath + "metricuploadservice-debug.aar")
        File releaseAar = new File(libsPath + "metricuploadservice-release.aar")
        List<String> aarNames = new ArrayList<>()
        String compileMsg, msg
        if (debugAar.exists()) {
            aarNames.add(debugAar.getName())
        }
        if (releaseAar.exists()) {
            aarNames.add(releaseAar.getName())
            dependencies.implementation(name: 'metricuploadservice-release', ext: 'aar')
            msg = "Attempting to build SampleApp with the metricuploadservice-release.aar file"
        } else {
            dependencies.implementation project(':metricuploadservice')
            msg = "The metricuploadservice-release.aar was not found. Building SampleApp without the .aar file"
        }

        StringBuilder sb = new StringBuilder()
        sb.append("The metricuploadservice .aar files found were: ").append(aarNames.toString())
        String foundFilesMsg = generateWrappedMessage(sb.toString())
        logger.lifecycle(foundFilesMsg)

        compileMsg = generateWrappedMessage(msg)
        logger.lifecycle(compileMsg)
    }
}

void checkForLWALibrary() {
    if (file('libs/login-with-amazon-sdk.jar').exists()) {
        StringBuilder sb = new StringBuilder()
        sb.append("Login with Amazon SDK found")
        String foundFilesMsg = generateWrappedMessage(sb.toString())
        logger.lifecycle(foundFilesMsg)
    } else {
        android {
            sourceSets {
                main {
                    java.exclude('**/LoginWithAmazonBrowser.java')
                }
            }
        }
    }
}
