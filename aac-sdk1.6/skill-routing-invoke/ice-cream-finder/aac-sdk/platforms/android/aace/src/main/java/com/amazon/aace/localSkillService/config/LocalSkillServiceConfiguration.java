/*
 * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazon.aace.localSkillService.config;

import com.amazon.aace.core.config.EngineConfiguration;
import com.amazon.aace.core.config.StreamConfiguration;

import org.json.JSONObject;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * The @c LocalSkillServiceConfiguration class is a factory interface for creating Alexa configuration objects.
 */
public class LocalSkillServiceConfiguration {
    /**
     * Factory method used to programmatically generate Local Skill Service configuration data.
     * The data generated by this method is equivalent to providing the following @c JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "localSkillService":
     *   {
     *     "server": {
     *       "endpoint": "<SERVER_ENDPOINT>"
     *     },
     *     "domainSlotType": {
     *       "endpoint": "<DOMAIN_SLOT_TYPE_SERVER_ENDPOINT>"
     *     }
     *   }
     * }
     * @endcode
     *
     * @param [in] serverEndpoint The path for the Unix Domain Socket of the server.
     * @param [in] domainSlotTypeSocketEndpoint The path for the Unix Domain Socket of the Domain Slot Type AHE server.
     */
    static public EngineConfiguration createLocalSkillServiceConfig( String serverEndpoint, String domainSlotTypeSocketEndpoint )
    {
        EngineConfiguration localSkillServiceConfig = null;

        try
        {
            JSONObject config = new JSONObject();
            JSONObject localSkillServiceElement = new JSONObject();
            JSONObject serverElement = new JSONObject();

            serverElement.put( "endpoint", serverEndpoint );
            localSkillServiceElement.put( "server", serverElement );
            if ( !domainSlotTypeSocketEndpoint.isEmpty() ) {
                JSONObject domainSlotTypeElement = new JSONObject();
                domainSlotTypeElement.put( "endpoint", domainSlotTypeSocketEndpoint );
                localSkillServiceElement.put( "domainSlotType", domainSlotTypeElement );
            }
            config.put( "localSkillService", localSkillServiceElement );

            String configStr = config.toString();
            InputStream is = new ByteArrayInputStream( configStr.getBytes( StandardCharsets.UTF_8.name() ) );

            localSkillServiceConfig = StreamConfiguration.create( is );
        }
        catch( Throwable ex ) {
            ex.printStackTrace();
        }

        return localSkillServiceConfig;
    }

    /**
     * Factory method used to programmatically generate Local Skill Service configuration data.
     * The data generated by this method is equivalent to providing the following @c JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "localSkillService":
     *     "server": {
     *       "port": "<SERVER_PORT>"
     *     },
     *     "domainSlotTypeClient": {
     *       "endpoint": "<DOMAIN_SLOT_TYPE_SERVER_ENDPOINT>"
     *     }
     * }
     * @endcode
     *
     * @param [in] serverPort The port for the Inet Socket of the server.
     * @param [in] domainSlotTypeSocketEndpoint The path for the Unix Domain Socket of the Domain Slot Type AHE server.
     */
    static public EngineConfiguration createLocalSkillServiceConfig( int serverPort, String domainSlotTypeSocketEndpoint )
    {
        EngineConfiguration localSkillServiceConfig = null;

        try
        {
            JSONObject config = new JSONObject();
            JSONObject localSkillServiceElement = new JSONObject();
            JSONObject serverElement = new JSONObject();

            serverElement.put( "port", serverPort );
            localSkillServiceElement.put( "server", serverElement );
            if ( !domainSlotTypeSocketEndpoint.isEmpty() ) {
                JSONObject domainSlotTypeElement = new JSONObject();
                domainSlotTypeElement.put( "endpoint", domainSlotTypeSocketEndpoint );
                localSkillServiceElement.put( "domainSlotType", domainSlotTypeElement );
            }
            config.put( "localSkillService", localSkillServiceElement );

            String configStr = config.toString();
            InputStream is = new ByteArrayInputStream( configStr.getBytes( StandardCharsets.UTF_8.name() ) );

            localSkillServiceConfig = StreamConfiguration.create( is );
        }
        catch( Throwable ex ) {
            ex.printStackTrace();
        }

        return localSkillServiceConfig;
    }
};
