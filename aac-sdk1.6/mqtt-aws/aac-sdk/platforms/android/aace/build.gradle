import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.library'

if (project.hasProperty("INCLUDE_ALEXA_COMMS_MODULE"))
    project.ext.INCLUDE_ALEXA_COMMS_MODULE = project.getProperties().get("INCLUDE_ALEXA_COMMS_MODULE").toBoolean()
else
    project.ext.INCLUDE_ALEXA_COMMS_MODULE = false;

if (project.hasProperty("INCLUDE_LOCAL_VOICE_CONTROL_MODULE"))
    project.ext.INCLUDE_LOCAL_VOICE_CONTROL_MODULE = project.getProperties().get("INCLUDE_LOCAL_VOICE_CONTROL_MODULE").toBoolean()
else
    project.ext.INCLUDE_LOCAL_VOICE_CONTROL_MODULE = false;

if (project.hasProperty("INCLUDE_AMAZONLITE_MODULE"))
    project.ext.INCLUDE_AMAZONLITE_MODULE = project.getProperties().get("INCLUDE_AMAZONLITE_MODULE").toBoolean()
else
    project.ext.INCLUDE_AMAZONLITE_MODULE = false;

android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 26
        versionCode 1
        versionName '1.6'
        ndk {
            abiFilters = generateAbiFiltersDeploy()
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_shared',
                          '-DINCLUDE_ALEXA_COMMS_MODULE=' + (project.INCLUDE_ALEXA_COMMS_MODULE ? "ON" : "OFF"),
                          '-DINCLUDE_LOCAL_VOICE_CONTROL_MODULE=' + (project.INCLUDE_LOCAL_VOICE_CONTROL_MODULE ? "ON" : "OFF"),
                          '-DINCLUDE_AMAZONLITE_MODULE=' + (project.INCLUDE_AMAZONLITE_MODULE ? "ON" : "OFF")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            jniDebuggable true
        }
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs 'native-dependencies/jni'

            java {
                srcDirs = ['src/main/java']
            }
        }
    }

    generatePropertiesForRuntime();
}


dependencies {
    implementation 'com.android.support:support-media-compat:26.1.0'
}

clean.doFirst {
    delete 'native-dependencies'
}

clean.doLast {
    // Touch CMakeLists.txt file to force re-running CMake after gradle clean...
    file('CMakeLists.txt').setLastModified(new Date().getTime())
}

//visit abi directories in builder/deploy folder, extract abis, and add to abiFilters
List<String> generateAbiFiltersDeploy() {
    List<String> abiFilters = new ArrayList<>()
    String builderDeployPath = "../../builder/deploy/"
    File deployDir = new File(builderDeployPath)
    File[] directories = deployDir.listFiles(new FileFilter() {
        @Override
        public boolean accept(File pathname) {
            return pathname.isDirectory()
        }
    })
    for (File dir : directories) {
        String abi = extractAbiFromDirectory(dir)
        if (abi != null) {
            abiFilters.add(abi)
        }
    }
    return abiFilters
}

String extractAbiFromDirectory(File dir) {
    String[] filenames = dir.list()
    for (String filename : filenames) {
        String abi = extractAbiFromString(filename)
        if (abi != null)
            return abi
    }
    return null
}

String extractAbiFromString(String filename) {
    Pattern pattern = Pattern.compile("aac-image-minimal-(armeabi-v7a|x86|x86_64|arm64-v8a)-android-[0-9]+\\.tar\\.gz")
    Matcher matcher = pattern.matcher(filename)
    if(matcher.find()) {
        String abi = matcher.group(1)
        String abiLogMsg = generateAbiLogMsg(abi, filename)
        logger.lifecycle(abiLogMsg)
        return abi
    } else {
        return null
    }
}

String generateAbiLogMsg(String abi, String filename) {
    StringBuilder sb = new StringBuilder()
    String logMsg = String.format("Extracting the abi '%s' from '%s'", abi, filename)
    String line = generateLine(logMsg.length())
    sb.append(line).append(logMsg).append(line)
    return sb.toString()
}

String generateLine(int length) {
    StringBuilder sb = new StringBuilder()
    sb.append('\n')
    for (int x = 0; x < length; x++) {
        sb.append("-")
    }
    sb.append('\n')
    return sb.toString()
}

void generatePropertiesForRuntime() {
    def runtimeProps = new Properties();
    runtimeProps.setProperty("communications", "false");
    runtimeProps.setProperty("localvoicecontrol", "false");

    if (project.INCLUDE_ALEXA_COMMS_MODULE) {
        runtimeProps.setProperty("communications", "true");
    }
    if (project.INCLUDE_LOCAL_VOICE_CONTROL_MODULE) {
        runtimeProps.setProperty("localvoicecontrol", "true");
    }
    if (project.INCLUDE_AMAZONLITE_MODULE) {
        runtimeProps.setProperty("amazonlite", "true");
    }

    def assetFolder = project.file('src/main/assets');
    if (!assetFolder.exists()) {
        assetFolder.mkdir();
    }

    def propFile = new File(assetFolder.getAbsolutePath() + '/modules.props');
    if (!propFile.exists()) {
        propFile.createNewFile();
    }

    runtimeProps.store(propFile.newWriter(), null);
}
