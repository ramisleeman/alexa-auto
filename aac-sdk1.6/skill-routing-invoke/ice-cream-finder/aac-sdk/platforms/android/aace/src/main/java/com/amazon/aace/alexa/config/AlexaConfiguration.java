/*
 * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazon.aace.alexa.config;

import android.util.Log;

import com.amazon.aace.alexa.EqualizerController.EqualizerBand;
import com.amazon.aace.alexa.EqualizerController.EqualizerBandLevel;
import com.amazon.aace.core.config.EngineConfiguration;
import com.amazon.aace.core.config.StreamConfiguration;

import org.json.JSONException;
import org.json.JSONObject;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * A factory interface for creating Alexa configuration objects
 */
public class AlexaConfiguration {

    private static final String TAG = AlexaConfiguration.class.getSimpleName();

    /**
     * Factory method used to programmatically generate device info configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "deviceInfo":
     *   {
     *     "deviceSerialNumber": "<DEVICE_SERIAL_NUMBER>"
     *     "clientId": "<CLIENT_ID>",
     *     "productId": "<PRODUCT_ID>"
     *   }
     * }
     * @endcode
     *
     * @param  deviceSerialNumber The device serial number used to authorize the client with AVS
     *
     * @param  clientId The client ID used to authorize the client with AVS
     *
     * @param  productId The product ID used to authorize the client with AVS
     */
    public static EngineConfiguration createDeviceInfoConfig( String deviceSerialNumber,
                                                              String clientId,
                                                              String productId ) {
        EngineConfiguration deviceConfig = null;

        JSONObject config = new JSONObject();
        try {

            JSONObject deviceInfoElement = new JSONObject();
            deviceInfoElement.put( "deviceSerialNumber", deviceSerialNumber );
            deviceInfoElement.put( "clientId", clientId );
            deviceInfoElement.put( "productId", productId );

            config.put("deviceInfo", deviceInfoElement );

        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            deviceConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return deviceConfig;
    }

    /**
     * Factory method used to programmatically generate alerts configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "alertsCapabilityAgent":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>"
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent alerts data.
     * The database will be created on initialization if it does not already exist.
     */
    public static EngineConfiguration createAlertsConfig( String databaseFilePath ) {

        EngineConfiguration alertsConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject alertsCapabilityAgentElement = new JSONObject();
            alertsCapabilityAgentElement.put( "databaseFilePath", databaseFilePath );
            config.put( "alertsCapabilityAgent", alertsCapabilityAgentElement );
        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            alertsConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return alertsConfig;
    }

    /**
     * Factory method used to programmatically generate notifications configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "notifications":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>"
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent notifications data.
     * The database will be created on initialization if it does not already exist.
     */
    public static EngineConfiguration createNotificationsConfig( String databaseFilePath ) {

        EngineConfiguration notificationsConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject notificationsElement = new JSONObject();
            notificationsElement.put( "databaseFilePath", databaseFilePath );
            config.put( "notifications", notificationsElement );
        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            notificationsConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return notificationsConfig;
    }

    /**
     * Factory method used to programmatically generate certified sender configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "certifiedSender":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>"
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent certified sender data.
     * The database will be created on initialization if it does not already exist.
     */
    public static EngineConfiguration createCertifiedSenderConfig( String databaseFilePath ) {
        EngineConfiguration certifiedSenderConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject certifiedSenderElement = new JSONObject();
            certifiedSenderElement.put( "databaseFilePath", databaseFilePath );
            config.put( "certifiedSender", certifiedSenderElement );
        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            certifiedSenderConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return certifiedSenderConfig;
    }

    /**
     * Factory method used to programmatically generate CURL configuration data.
     * The 'libCurlUtils' sub-component of the global configuration supports the following options:
     * - CURLOPT_CAPATH If present, specifies a value for the libcurl property CURLOPT_CAPATH.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *     "libcurlUtils" : {
     *         "CURLOPT_CAPATH" : "<CA_CERTIFICATES_FILE_PATH>"
     *     }
     * }
     * @endcode
     *
     * @param  certsPath The file path to the directory holding CA certificates
     */
    public static EngineConfiguration createCurlConfig( String certsPath ) {
        return createCurlConfig(certsPath,null);
    }

    /**
     * Factory method used to programmatically generate CURL configuration data.
     * The 'libCurlUtils' sub-component of the global configuration supports the following options:
     * - CURLOPT_CAPATH If present, specifies a value for the libcurl property CURLOPT_CAPATH.
     * - CURLOPT_INTERFACE if present, specifies a value for the libcurl property CURLOPT_INTERFACE.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *     "libcurlUtils" : {
     *         "CURLOPT_CAPATH" : "<CA_CERTIFICATES_FILE_PATH>"
     *         "CURLOPT_INTERFACE" : "<NETWORK_INTERFACE_NAME>"
     *     }
     * }
     * @endcode
     *
     * @param  certsPath The file path to the directory holding CA certificates
     * @param  iface The interface used for outgoing network interface.
     * This can be an network interface name, an IP address or a host name.
     */
    public static EngineConfiguration createCurlConfig( String certsPath, String iface  ) {
        EngineConfiguration curlConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject libcurlUtilsElement = new JSONObject();
            libcurlUtilsElement.put( "CURLOPT_CAPATH", certsPath );
            if( iface != null) {
                libcurlUtilsElement.put("CURLOPT_INTERFACE", iface);
            }
            config.put( "libcurlUtils", libcurlUtilsElement );
        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            curlConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return curlConfig;
    }

    /**
     * Factory method used to programmatically generate settings configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "settings": {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *     "defaultAVSClientSettings": {
     *        "locale": "<LOCALE>"
     *     }
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent settings data.
     * The database will be created on initialization if it does not already exist.
     *
     * @param  locale The current locale setting on the client
     */
    public static EngineConfiguration createSettingsConfig( String databaseFilePath, String locale ) {
        EngineConfiguration settingsConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject settingsElement = new JSONObject();
            settingsElement.put( "databaseFilePath", databaseFilePath );
            config.put( "settings", settingsElement );
            JSONObject defaultAVSClientSettingsElement = new JSONObject();
            defaultAVSClientSettingsElement.put( "locale", locale );
            settingsElement.put( "defaultAVSClientSettings", defaultAVSClientSettingsElement );
        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            settingsConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return settingsConfig;
    }

    /**
     * Factory method used to programmatically generate settings configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "settings": {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *     "defaultAVSClientSettings": {
     *        "locale": "<LOCALE>"
     *     }
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent settings data.
     * The database will be created on initialization if it does not already exist.
     *
     * @param  locale The current locale setting on the client
     */
    public static EngineConfiguration createSettingsConfig( String databaseFilePath ) {
        return AlexaConfiguration.createSettingsConfig( databaseFilePath, "en-US" );
    }

    /**
     * Factory method used to programmatically generate misc storage configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "miscDatabase":
     *   {
     *     "databaseFilePath": "<SQLITE_DATABASE_FILE_PATH>",
     *   }
     * }
     * @endcode
     *
     * @param  databaseFilePath The file path to the SQLite database used to store persistent misc storage data.
     * The database will be created on initialization if it does not already exist.
     */
    public static EngineConfiguration createMiscStorageConfig( String databaseFilePath ) {
        EngineConfiguration miscStorageConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject miscStorageElement = new JSONObject();
            miscStorageElement.put( "databaseFilePath", databaseFilePath );
            config.put( "miscDatabase", miscStorageElement );
        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            miscStorageConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return miscStorageConfig;
    }

    /**
     * Factory method used to programmatically generate system configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code    {.json}
     * {
     *   "aace.alexa": {
     *      "system": {
     *          "firmwareVersion": "<FIRMWARE_VERSION>"
     *      }
     *   }
     * }
     * @endcode
     *
     * @param  firmwareVersion The firmware version of the client device
     */
    public static EngineConfiguration createSystemConfig( int firmwareVersion ) {
        EngineConfiguration systemConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject aaceAlexaElement = new JSONObject();
            config.put( "aace.alexa", aaceAlexaElement );
            JSONObject systemElement = new JSONObject();
            systemElement.put( "firmwareVersion", firmwareVersion );
            aaceAlexaElement.put( "system", systemElement );
        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            systemConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return systemConfig;
    }

    /**
     * Factory method used to programmatically generate encoder configuration data.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "aace.alexa": {
     *      "speechRecognizer": {
     *          "encoder": {
     *               "name": "<ENCODER_NAME>"
     *          }
     *      }
     *   }
     * }
     * @endcode
     *
     * @param encoderName The encoder codec name to be used
     */
    public static EngineConfiguration createSpeechRecognizerConfig( String encoderName ) {
        EngineConfiguration speechRecognizerConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject aaceAlexaElement = new JSONObject();
            config.put( "aace.alexa", aaceAlexaElement );
            JSONObject speechRecognizerElement = new JSONObject();
            JSONObject encoderElement = new JSONObject();
            encoderElement.put( "name", encoderName );
            speechRecognizerElement.put( "encoder", encoderElement );
            aaceAlexaElement.put( "speechRecognizer", speechRecognizerElement );
        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            speechRecognizerConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return speechRecognizerConfig;
    }

    public enum TemplateRuntimeTimeoutType {
        /**
         *  Display card timeout in milli seconds when Alexa completes TTS.
         *  @hideinitializer
         */
        DISPLAY_CARD_TTS_FINISHED_TIMEOUT ( "DISPLAY_CARD_TTS_FINISHED_TIMEOUT","displayCardTTSFinishedTimeout" ),

        /**
         *  Display card timeout in milli seconds when AudioPlayback Completes.
         *  @hideinitializer
         */
        DISPLAY_CARD_AUDIO_PLAYBACK_FINISHED_TIMEOUT ( "DISPLAY_CARD_AUDIO_PLAYBACK_FINISHED_TIMEOUT","displayCardAudioPlaybackFinishedTimeout" ),

        /**
         *  Display card timeout in milli seconds when AudioPlayback is Stopped or Paused.
         *  @hideinitializer
         */
        DISPLAY_CARD_AUDIO_PLAYBACK_STOPPED_PAUSED_TIMEOUT ( "DISPLAY_CARD_AUDIO_PLAYBACK_STOPPED_PAUSED_TIMEOUT","displayCardAudioPlaybackStoppedPausedTimeout" );

        /**
         * @internal
         */
        private String mName;

        /**
         * @internal
         */
        private String mKey;

        /**
         * Type used to identify a TemplateRuntime configuration type and value pair
         */
        TemplateRuntimeTimeoutType( String name, String key ) {
            mName = name;
            mKey = key;
        }

        /**
         * @internal
         */
        public String toString() {
            return mName;
        }

        /**
         * @internal
         */
        public String getKey() {
            return mKey;
        }

    }

    public static class TemplateRuntimeTimeout {
        private TemplateRuntimeTimeoutType mType;
        private Integer mValue;

        public TemplateRuntimeTimeout( TemplateRuntimeTimeoutType type, Integer value ) {
            mType = type;
            mValue = value;
        }

        public TemplateRuntimeTimeoutType getType() { return mType; }
        public Integer getValue() { return mValue; }
    }

    /**
     * Factory method used to programmatically generate template runtime configuration data.
     * This is an optional configuration. Following are the accepted keys and their description.
     * - displayCardTTSFinishedTimeout If present, specifies the values in milli seconds to control the timeout of display card at the Alexa Speech.
     * - displayCardAudioPlaybackFinishedTimeout If present, specifies the values in milli seconds to control the timeout of display card at the FINISHED state of AudioPlayback.
     * - displayCardAudioPlaybackStoppedPausedTimeout If present, specifies the values in milli seconds to control the timeout of display card at STOP or PAUSE state of AudioPlayback.
     * The data generated by this method is equivalent to providing the following JSON
     * values in a configuration file:
     *
     * @code{.json}
     * {
     *   "templateRuntimeCapabilityAgent": {
     *      "displayCardTTSFinishedTimeout": <TIMEOUT_IN_MS>,
     *      "displayCardAudioPlaybackFinishedTimeout": <TIMEOUT_IN_MS>,
     *      "displayCardAudioPlaybackStoppedPausedTimeout": <TIMEOUT_IN_MS>
     *   }
     * }
     * @endcode
     *
     * @param timeoutList A list of @c TemplateRuntimeTimeout type and value pairs
     *
     */
    public static EngineConfiguration createTemplateRuntimeTimeoutConfig( TemplateRuntimeTimeout[] timeoutList ) {

        EngineConfiguration templateRuntimeConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject templateRuntimeElement = new JSONObject();

            for ( TemplateRuntimeTimeout next : timeoutList ) {
                templateRuntimeElement.put( next.getType().getKey(), next.getValue() );
            }

            config.put("templateRuntimeCapabilityAgent", templateRuntimeElement );

        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            templateRuntimeConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return templateRuntimeConfig;
    }

    /**
     * Factory method used to programmatically generate equalizer controller configuration data.
     * This is an optional configuration, and default settings will be used if configuration is not
     * provided. This method produces configuration data according to the JSON structure in the
     * sample below.
     *
     * @code{.json}
     *  "equalizer": {
     *      "bands": {
     *          "BASS": true,
     *          "MIDRANGE": false,
     *          "TREBLE": true
     *      },
     *      "defaultState": {
     *          "bands": {
     *              "BASS": 4,
     *              "TREBLE" : -1
     *          }
     *      },
     *      "minLevel": -6,
     *      "maxLevel": 6
     *  }
     * @endcode
     *
     * The configuration branches are used as follows:
     *
     * @li equalizer.bands: Specifies which bands are supported by the device and will be enabled
     *  for control with Alexa. Each child key is the name of an Alexa-supported band
     *  ("BASS", "MIDRANGE", or "TREBLE") and value is whether the device supports the band. Only
     *  bands explicitly declared supported will be enabled in the SDK and Alexa. Omitting this
     *  branch enables all bands by default.
     *
     * @li equalizer.defaultState: Describes the default or reset state of the equalizer. These
     *  settings are used to reset the equalizer with Alexa such as by saying "Alexa, reset bass."
     *  If this branch or its child is omitted, default values will be used.
     * @li equalizer.defaultState.bands: Defines the default gain level setting in dB for each
     *  supported equalizer band. Each element key is the name of a supported band and value is a
     *  level (int) specifying the default gain in dB. All of the supported bands must be provided
     *  once this branch is defined. All dB levels must obey the limits declared in
     *  "equalizer.minLevel" and "equalizer.maxLevel". Omitting this branch uses the default 0db
     *  for each band.
     *
     * @li equalizer.minLevel and equalizer.maxLevel: Integer values specifying the decibel level
     *  range on which Alexa may operate for the supported bands. The device may support a
     *  different range internally, but Alexa will know only about the limits declared here. Values
     *  should be specified as absolute amplitude gain in integer dB and scaled to the platform's
     *  internal range as necessary. If these values are omitted, the default range min -6dB and
     *  max +6dB will be used.
     *
     * @param  supportedBands The supported equalizer bands. Corresponds to the "equalizer.bands"
     *         config branch. Only bands provided will be enabled. Null @a supportedBands omits the
     *         config branch. Nonnull @a supportedBands includes the branch and declares each band
     *         in the set with a value "true".
     * @param  minLevel The minimum gain level for the equalizer bands in integer dB. Corresponds
     *         to "equalizer.minLevel".
     * @param  maxLevel The maximum gain level for the equalizer bands in integer dB. Corresponds
     *         to "equalizer.maxLevel".
     * @param  defaultBandLevels The default or reset state of the equalizer bands. Corresponds to
     *         the "equalizer.defaultState.bands" config branch. Null @a defaultBandLevels omits
     *         the config branch.
     */
    public static EngineConfiguration createEqualizerControllerConfig(
            EqualizerBand[] supportedBands,
            int minLevel,
            int maxLevel,
            EqualizerBandLevel[] defaultBandLevels  ) {

        EngineConfiguration equalizerConfig = null;

        JSONObject config = new JSONObject();
        try {
            JSONObject equalizerElement = new JSONObject();

            // enabled
            equalizerElement.put( "enabled", true );

            // minLevel
            equalizerElement.put( "minLevel", minLevel );

            // maxLevel
            equalizerElement.put( "maxLevel", maxLevel );

            // bands
            if ( supportedBands != null ) {
                JSONObject bandsElement = new JSONObject();
                if ( supportedBands.length != 0 ) {
                    for ( EqualizerBand band : supportedBands ) {
                        if ( band != null ) bandsElement.put( band.toString(), true );
                    }
                }
                equalizerElement.put( "bands", bandsElement );
            }

            // defaultState
            if ( defaultBandLevels != null && defaultBandLevels.length != 0 ) {
                JSONObject defaultStateElement = new JSONObject();

                // defaultState.bands
                JSONObject defaultBands = new JSONObject();
                for ( EqualizerBandLevel bandLevel : defaultBandLevels ) {
                    if ( bandLevel != null && bandLevel.getBand() != null ) {
                        defaultBands.put( bandLevel.getBand().toString(), bandLevel.getLevel() );
                    }
                }
                defaultStateElement.put( "bands", defaultBands );

                equalizerElement.put( "defaultState", defaultStateElement );
            }

            // root
            config.put("equalizer", equalizerElement );

        } catch ( JSONException e ) { Log.e( TAG, e.getMessage() ); }

        String configStr = config.toString();
        try ( InputStream is = new ByteArrayInputStream(
                configStr.getBytes( StandardCharsets.UTF_8.name() ) )
        ) {
            equalizerConfig = StreamConfiguration.create( is );
        } catch ( IOException e ) { Log.e( TAG, e.getMessage() ); }

        return equalizerConfig;
    }
}
